global:
  ## A certificate issues for the above domain
  defaultInternalIssuerRef:
   kind: ClusterIssuer
   name: null ## INSTRUCTION: certificate issuer

  defaultHealthCheckImage:
    repository: docker.io/eoepca/healthcheck_runner
    pullPolicy: IfNotPresent
    tag: "2.0.0-beta2"

  ## TODO: Remove this default and make sure it is set or unused
  defaultOTLPEndpoint: https://resource-health-opentelemetry-collector:4317

  defaultCheckAPIBaseURL: https://resource-health.apx.develop.eoepca.org/api/healthchecks/
  defaultTelemetryAPIBaseURL: https://resource-health.apx.develop.eoepca.org/api/telemetry/

mock_api:
  image:
    repository: docker.io/eoepca/mock_service
    pullPolicy: IfNotPresent
    tag: "2.0.0-beta2"
  serviceType: ClusterIP
  containerPort: 5000
  servicePort: 5000
  replicaCount: 2
  environmentFixed:
    - name: OTEL_EXPORTER_OTLP_ENDPOINT
      value: https://resource-health-opentelemetry-collector:4317
  tls:
    commonName: resource-health-mock-api
    # issuerRef:
    #   kind: ClusterIssuer
    #   name: null ## INSTRUCTION: Set to name of certificate issuer for the internal cluster domain

healthchecks:
  templates:
    ping_template.py: |
      from check_backends.k8s_backend.template_utils import *

      class SimplePingArguments(BaseModel):
          endpoint: str = Field(json_schema_extra={"format": "textarea"})
          expected_status_code: int = Field(ge=100, lt=600, default=200)

      def simple_ping_containers(template_args):
          return [
              container(
                  image=DEFAULT_CONTAINER_IMAGE,
                  env={
                      "RESOURCE_HEALTH_RUNNER_SCRIPT": "data:text/plain;base64,ZnJvbSBvcyBpbXBvcnQgZW52aXJvbgppbXBvcnQgcmVxdWVzdHMKCkdFTkVSSUNfRU5EUE9JTlQ6IHN0ciA9IGVudmlyb25bIkdFTkVSSUNfRU5EUE9JTlQiXQpFWFBFQ1RFRF9TVEFUVVNfQ09ERTogaW50ID0gaW50KGVudmlyb25bIkVYUEVDVEVEX1NUQVRVU19DT0RFIl0pCgoKZGVmIHRlc3RfcGluZygpIC0+IE5vbmU6CiAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCgKICAgICAgICBHRU5FUklDX0VORFBPSU5ULAogICAgKQogICAgYXNzZXJ0IHJlc3BvbnNlLnN0YXR1c19jb2RlID09IEVYUEVDVEVEX1NUQVRVU19DT0RFCg==",
                      "GENERIC_ENDPOINT": template_args.endpoint,
                      "EXPECTED_STATUS_CODE": str(template_args.expected_status_code),
                  },
              )
          ]

      SimplePing = cronjob_template(
          template_id="simple_http_ping",
          argument_type=SimplePingArguments,
          label="HTTP ping template",
          description="Simple template for sending a HTTP request to a single endpoint.",
          containers=simple_ping_containers,
      )

    script_template.py: |
      from check_backends.k8s_backend.template_examples import SimpleScript as SimpleScript

  checks: []
  # - name: hourly-mockapi-check
  #   # image:
  #   #   repository: docker.io/eoepca/healthcheck_runner
  #   #   pullPolicy: IfNotPresent
  #   #   tag: "v0.1.0-demo"
  #   schedule: "@hourly"
  #   # This is an empty requirements file
  #   requirements: "https://gist.githubusercontent.com/tilowiklundSensmetry/a9fefe2873b731b483f554607a82deaa/raw/1136a82ca3c8f28b1ad4d895871514185927dd1c/requirements.txt"
  #   script: "https://raw.githubusercontent.com/EOEPCA/resource-health/refs/tags/v0.1.0-demo/pytest-health/instrumentation/examples/mock_api_check.py"
  #   # overrideOTLPEndpoint: https://resource-health-opentelemetry-collector:4317
  #   env:
  #     - name: MOCK_API_HOST
  #       value: http://resource-health-mockapi:5000

  # - name: daily-trivial-check
  #   ## Every day at 08:00
  #   schedule: "0 8 * * *"
  #   # This is an empty requirements file
  #   requirements: "https://gist.githubusercontent.com/tilowiklundSensmetry/a9fefe2873b731b483f554607a82deaa/raw/1136a82ca3c8f28b1ad4d895871514185927dd1c/requirements.txt"
  #   script: "https://raw.githubusercontent.com/EOEPCA/resource-health/refs/tags/v0.1.0-demo/pytest-health/instrumentation/examples/trivial_check.py"
  
  tls:
    commonName: healthchecks
    # issuerRef:
    #   kind: ClusterIssuer
    #   name: null ## INSTRUCTION: Set to name of certificate issuer for the internal cluster domain

check_api:
  image:
    repository: docker.io/eoepca/resourcehealth_check_api
    pullPolicy: IfNotPresent
    tag: "v0.3.0-internal1-c8508"
  serviceType: ClusterIP
  containerPort: 8000
  servicePort: 8000
  replicaCount: 2
  environmentFixed:
  # - name: RH_CHECK_API_BASE_URL
  #   value: https://resource-health.apx.develop.eoepca.org/api/healthchecks/
  # - name: ...
  #   secret: ...
  #   key: ...
  environmentSecrets: []
  # - name: ...
  #   value: ...
  configmapMounts: []
  # - name: ...
  #   configmapName: ...
  #   mountPath: ...

telemetry_api:
  image:
    repository: docker.io/eoepca/resourcehealth_telemetry_api
    pullPolicy: IfNotPresent
    tag: "v0.3.0-internal7-8bb49"
  serviceType: ClusterIP
  containerPort: 8080
  servicePort: 8080
  replicaCount: 2
  environmentFixed:
  # - name: RH_TELEMETRY_API_BASE_URL
  #   value: https://resource-health.apx.develop.eoepca.org/api/telemetry/
  # - name: ...
  #   secret: ...
  #   key: ...
  environmentSecrets: []
  # - name: ...
  #   value: ...

web:
  image:
    repository: docker.io/eoepca/resourcehealth_web
    pullPolicy: IfNotPresent
    tag: "v0.3.0-internal12-2a66fa1"
  serviceType: ClusterIP
  containerPort: 3000
  servicePort: 80
  replicaCount: 2
  environmentSecrets: []
  environmentFixed:
    - name: NEXT_PUBLIC_CHECK_MANAGER_ENDPOINT
      value: http://resource-health-check-api:8000/v1
    - name: NEXT_PUBLIC_TELEMETRY_ENDPOINT
      value: http://resource-health-telemetry-api:8080/v1
  tls:
    client:
      commonName: resource-health-web
      # issuerRef:
      #   kind: ClusterIssuer
      #   name: null ## INSTRUCTION: Set to name of certificate issuer for the internal cluster domain

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

## NOTE: Currently not used
ingress:
  enabled: false
  # className: "traefik"
  # annotations: {}
  # host: "kubernetes"
  # tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}

nodeSelector: {}

tolerations: []

affinity: {}
